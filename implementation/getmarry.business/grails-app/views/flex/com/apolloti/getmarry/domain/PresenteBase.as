/**
 * Generated by Gas3 v2.0.0 (Granite Data Services).
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERWRITTEN EACH TIME YOU USE
 * THE GENERATOR. INSTEAD, EDIT THE INHERITED CLASS (Presente.as).
 */

package com.apolloti.getmarry.domain {

    import flash.events.EventDispatcher;
    import flash.net.FileReference;
    import flash.utils.IDataInput;
    import flash.utils.IDataOutput;
    import flash.utils.IExternalizable;
    import flash.utils.getQualifiedClassName;
    import mx.core.IUID;
    import mx.utils.UIDUtil;
    import org.granite.collections.IPersistentCollection;
    import org.granite.meta;
    import org.granite.tide.IEntity;
    import org.granite.tide.IEntityManager;
    import org.granite.tide.IPropertyHolder;

    use namespace meta;

    [Managed]
    public class PresenteBase implements IExternalizable, IUID {

        protected var _em:IEntityManager = null;

        private var __initialized:Boolean = true;
        private var __detachedState:String = null;

        private var _categoria:Categoria;
        private var _codigo:String;
        private var _descricao:String;
        private var _id:String;
        private var _loja:Loja;
        private var _marca:Marca;
        private var _modelo:String;
        private var _nome:String;
        private var _quantidade:Number;
        private var _status:String;
        private var _version:Number;

        meta function isInitialized(name:String = null):Boolean {
            if (!name)
                return __initialized;

            var property:* = this[name];
            return (
                (!(property is Presente) || (property as Presente).meta::isInitialized()) &&
                (!(property is IPersistentCollection) || (property as IPersistentCollection).isInitialized())
            );
        }

        [Transient]
        public function meta_getEntityManager():IEntityManager {
            return _em;
        }
        public function meta_setEntityManager(em:IEntityManager):void {
        	_em = em;
        }
    
    	public static const meta_constraints:Array = [
    		{ property: "status",
				inList: "[A Comprar, Comprado]"
    		}, 
    		{ property: "descricao",
				blank: "true", widget: "textArea"
    		}, 
    		{ property: "marca",
				association: "oneToOne"
    		}, 
    		{ property: "codigo" }, 
    		{ property: "categoria",
				association: "oneToOne"
    		}, 
    		{ property: "quantidade" }, 
    		{ property: "loja",
				association: "oneToOne"
    		}, 
    		{ property: "nome" }, 
    		{ property: "modelo" }
		]

        public function set categoria(value:com.apolloti.getmarry.domain.Categoria):void {
            _categoria = value;
        }
        public function get categoria():Categoria {
            return _categoria;
        }

        public function set codigo(value:String):void {
            _codigo = value;
        }
        public function get codigo():String {
            return _codigo;
        }

        public function set descricao(value:String):void {
            _descricao = value;
        }
        public function get descricao():String {
            return _descricao;
        }

        public function set id(value:String):void {
            _id = value;
        }
        [Id]
        public function get id():String {
            return _id;
        }

        public function set loja(value:com.apolloti.getmarry.domain.Loja):void {
            _loja = value;
        }
        public function get loja():Loja {
            return _loja;
        }

        public function set marca(value:com.apolloti.getmarry.domain.Marca):void {
            _marca = value;
        }
        public function get marca():Marca {
            return _marca;
        }

        public function set modelo(value:String):void {
            _modelo = value;
        }
        public function get modelo():String {
            return _modelo;
        }

        public function set nome(value:String):void {
            _nome = value;
        }
        public function get nome():String {
            return _nome;
        }

        public function set quantidade(value:Number):void {
            _quantidade = value;
        }
        public function get quantidade():Number {
            return _quantidade;
        }

        public function set status(value:String):void {
            _status = value;
        }
        public function get status():String {
            return _status;
        }

        public function set version(value:Number):void {
            _version = value;
        }
        [Version]
        public function get version():Number {
            return _version;
        }
/*
        public function set uid(value:String):void {
            // noop... XOVAA
        }
        public function get uid():String {
            if (!_id)
                return UIDUtil.createUID();
            return getQualifiedClassName(this) + "#[" + String(_id) + "]";
        }
*/


        public function meta_merge(em:IEntityManager, obj:*):void {
            var src:PresenteBase = PresenteBase(obj);
            __initialized = src.__initialized;
            __detachedState = src.__detachedState;
            if (meta::isInitialized()) {
               	em.meta_mergeExternal(src._categoria, _categoria, null, this, 'categoria', function setter(o:*):void{_categoria = o as Categoria});
               	em.meta_mergeExternal(src._codigo, _codigo, null, this, 'codigo', function setter(o:*):void{_codigo = o as String});
               	em.meta_mergeExternal(src._descricao, _descricao, null, this, 'descricao', function setter(o:*):void{_descricao = o as String});
               	em.meta_mergeExternal(src._id, _id, null, this, 'id', function setter(o:*):void{_id = o as String});
               	em.meta_mergeExternal(src._loja, _loja, null, this, 'loja', function setter(o:*):void{_loja = o as Loja});
               	em.meta_mergeExternal(src._marca, _marca, null, this, 'marca', function setter(o:*):void{_marca = o as Marca});
               	em.meta_mergeExternal(src._modelo, _modelo, null, this, 'modelo', function setter(o:*):void{_modelo = o as String});
               	em.meta_mergeExternal(src._nome, _nome, null, this, 'nome', function setter(o:*):void{_nome = o as String});
               	em.meta_mergeExternal(src._quantidade, _quantidade, null, this, 'quantidade', function setter(o:*):void{_quantidade = o as Number});
               	em.meta_mergeExternal(src._status, _status, null, this, 'status', function setter(o:*):void{_status = o as String});
               	em.meta_mergeExternal(src._version, _version, null, this, 'version', function setter(o:*):void{_version = o as Number});
            }
            else {
               em.meta_mergeExternal(src._id, _id, null, this, 'id', function setter(o:*):void{_id = o as String});
            }
        }

        public function readExternal(input:IDataInput):void {
            __initialized = input.readObject() as Boolean;
            __detachedState = input.readObject() as String;
            if (meta::isInitialized()) {
                _categoria = input.readObject() as Categoria;
                _codigo = input.readObject() as String;
                _descricao = input.readObject() as String;
                _id = input.readObject() as String;
                _loja = input.readObject() as Loja;
                _marca = input.readObject() as Marca;
                _modelo = input.readObject() as String;
                _nome = input.readObject() as String;
                _quantidade = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
                _status = input.readObject() as String;
                _version = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
            }
            else {
                _id = input.readObject() as String;
            }
        }

        public function writeExternal(output:IDataOutput):void {
            output.writeObject(__initialized);
            output.writeObject(__detachedState);
            if (meta::isInitialized()) { 
                output.writeObject((_categoria is IPropertyHolder) ? IPropertyHolder(_categoria).object : _categoria); 
                output.writeObject((_codigo is IPropertyHolder) ? IPropertyHolder(_codigo).object : _codigo); 
                output.writeObject((_descricao is IPropertyHolder) ? IPropertyHolder(_descricao).object : _descricao); 
                output.writeObject((_id is IPropertyHolder) ? IPropertyHolder(_id).object : _id); 
                output.writeObject((_loja is IPropertyHolder) ? IPropertyHolder(_loja).object : _loja); 
                output.writeObject((_marca is IPropertyHolder) ? IPropertyHolder(_marca).object : _marca); 
                output.writeObject((_modelo is IPropertyHolder) ? IPropertyHolder(_modelo).object : _modelo); 
                output.writeObject((_nome is IPropertyHolder) ? IPropertyHolder(_nome).object : _nome); 
                output.writeObject((_quantidade is IPropertyHolder) ? IPropertyHolder(_quantidade).object : _quantidade); 
                output.writeObject((_status is IPropertyHolder) ? IPropertyHolder(_status).object : _status); 
                output.writeObject((_version is IPropertyHolder) ? IPropertyHolder(_version).object : _version);
            }
            else {
                output.writeObject(_id);
            }
        }
    }
}
