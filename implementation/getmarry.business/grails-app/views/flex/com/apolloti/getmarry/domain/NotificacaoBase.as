/**
 * Generated by Gas3 v2.0.0 (Granite Data Services).
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERWRITTEN EACH TIME YOU USE
 * THE GENERATOR. INSTEAD, EDIT THE INHERITED CLASS (Notificacao.as).
 */

package com.apolloti.getmarry.domain {

    import flash.events.EventDispatcher;
    import flash.net.FileReference;
    import flash.utils.IDataInput;
    import flash.utils.IDataOutput;
    import flash.utils.IExternalizable;
    import flash.utils.getQualifiedClassName;
    import mx.core.IUID;
    import mx.utils.UIDUtil;
    import org.granite.collections.IPersistentCollection;
    import org.granite.meta;
    import org.granite.tide.IEntity;
    import org.granite.tide.IEntityManager;
    import org.granite.tide.IPropertyHolder;

    use namespace meta;

    [Managed]
    public class NotificacaoBase implements IExternalizable, IUID {

        protected var _em:IEntityManager = null;

        private var __initialized:Boolean = true;
        private var __detachedState:String = null;

        private var _convidado:Convidado;
        private var _id:String;
        private var _observacao:String;
        private var _presente:Presente;
        private var _version:Number;

        meta function isInitialized(name:String = null):Boolean {
            if (!name)
                return __initialized;

            var property:* = this[name];
            return (
                (!(property is Notificacao) || (property as Notificacao).meta::isInitialized()) &&
                (!(property is IPersistentCollection) || (property as IPersistentCollection).isInitialized())
            );
        }

        [Transient]
        public function meta_getEntityManager():IEntityManager {
            return _em;
        }
        public function meta_setEntityManager(em:IEntityManager):void {
        	_em = em;
        }
    
    	public static const meta_constraints:Array = [
    		{ property: "observacao",
				blank: "true", widget: "textArea"
    		}, 
    		{ property: "convidado",
				association: "oneToOne"
    		}, 
    		{ property: "presente",
				association: "oneToOne"
    		}
		]

        public function set convidado(value:com.apolloti.getmarry.domain.Convidado):void {
            _convidado = value;
        }
        public function get convidado():Convidado {
            return _convidado;
        }

        public function set id(value:String):void {
            _id = value;
        }
        [Id]
        public function get id():String {
            return _id;
        }

        public function set observacao(value:String):void {
            _observacao = value;
        }
        public function get observacao():String {
            return _observacao;
        }

        public function set presente(value:com.apolloti.getmarry.domain.Presente):void {
            _presente = value;
        }
        public function get presente():Presente {
            return _presente;
        }

        public function set version(value:Number):void {
            _version = value;
        }
        [Version]
        public function get version():Number {
            return _version;
        }
/*
        public function set uid(value:String):void {
            // noop... XOVAA
        }
        public function get uid():String {
            if (!_id)
                return UIDUtil.createUID();
            return getQualifiedClassName(this) + "#[" + String(_id) + "]";
        }
*/


        public function meta_merge(em:IEntityManager, obj:*):void {
            var src:NotificacaoBase = NotificacaoBase(obj);
            __initialized = src.__initialized;
            __detachedState = src.__detachedState;
            if (meta::isInitialized()) {
               	em.meta_mergeExternal(src._convidado, _convidado, null, this, 'convidado', function setter(o:*):void{_convidado = o as Convidado});
               	em.meta_mergeExternal(src._id, _id, null, this, 'id', function setter(o:*):void{_id = o as String});
               	em.meta_mergeExternal(src._observacao, _observacao, null, this, 'observacao', function setter(o:*):void{_observacao = o as String});
               	em.meta_mergeExternal(src._presente, _presente, null, this, 'presente', function setter(o:*):void{_presente = o as Presente});
               	em.meta_mergeExternal(src._version, _version, null, this, 'version', function setter(o:*):void{_version = o as Number});
            }
            else {
               em.meta_mergeExternal(src._id, _id, null, this, 'id', function setter(o:*):void{_id = o as String});
            }
        }

        public function readExternal(input:IDataInput):void {
            __initialized = input.readObject() as Boolean;
            __detachedState = input.readObject() as String;
            if (meta::isInitialized()) {
                _convidado = input.readObject() as Convidado;
                _id = input.readObject() as String;
                _observacao = input.readObject() as String;
                _presente = input.readObject() as Presente;
                _version = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
            }
            else {
                _id = input.readObject() as String;
            }
        }

        public function writeExternal(output:IDataOutput):void {
            output.writeObject(__initialized);
            output.writeObject(__detachedState);
            if (meta::isInitialized()) { 
                output.writeObject((_convidado is IPropertyHolder) ? IPropertyHolder(_convidado).object : _convidado); 
                output.writeObject((_id is IPropertyHolder) ? IPropertyHolder(_id).object : _id); 
                output.writeObject((_observacao is IPropertyHolder) ? IPropertyHolder(_observacao).object : _observacao); 
                output.writeObject((_presente is IPropertyHolder) ? IPropertyHolder(_presente).object : _presente); 
                output.writeObject((_version is IPropertyHolder) ? IPropertyHolder(_version).object : _version);
            }
            else {
                output.writeObject(_id);
            }
        }
    }
}
